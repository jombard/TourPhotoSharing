@model TPS.Web.Core.ViewModels.TourImagesViewModel

@{
    ViewBag.Title = Model.Tour.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag.Title</h2>
<p>@Model.Tour.Description</p>

<div id="image-list" >
    <div class="row image-filters">
        @*<div class="col-sm-6 col-md-3">
        <input class="search form-control" placeholder="Type to filter by name, date or time" />
    </div>*@
        <div class="col-sm-6 col-md-3">
            @Html.DropDownListFor(m => m.UploaderNames, new SelectList(Model.UploaderNames), "Show all photos", new {@class = "form-control", id="selectOwner"})
        </div>
        <div class="col-sm-12 col-md-6">
            <span class="sort btn btn-default" data-sort="date">
                Sort by date
            </span>
            <span class="sort btn btn-default" data-sort="owner">
                Sort by uploader
            </span>
            <span class="btn btn-primary js-view-map hidden">
                <i class="glyphicon glyphicon-globe"></i>
                View map
            </span>
        </div>
    </div>
    
    <hr />
    
    <div id="map" class="hidden" style="width: 100%; margin-bottom: 10px; height: 400px;"></div>

    <div class="row">
        <div class="col-sm-12">
            <ul class="list-inline list list-tour-images">
                @foreach (var imageModel in Model.TourImages)
                {
                    <li>
                        <div class="thumbnail">
                            <img src="@imageModel.Image.ImageUrl.Replace("~", @"..\..")?autorotate=true&w=100&h=100&mode=crop"
                                 alt="@imageModel.Image.Caption"
                                 data-author="@imageModel.Image.Owner.FullName"
                                 data-lat="@imageModel.Image.Latitude"
                                 data-lng="@imageModel.Image.Longitude"
                                 class="image"/>
                            <div class="date">@imageModel.Image.CreatedDate.Value.Ticks</div>
                            <div class="owner">Photo by: <span>@imageModel.Image.Owner.FullName</span>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
@Html.Partial("_ImageModal")

@section Scripts {
    @Scripts.Render("~/Scripts/App/app.js")
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCYa67zXJI_Zdh_NNyuIfq1k6rO2TuNp8Y&callback=enableMaps"></script>
    <script>
        function enableMaps() {
            $(".js-view-map").removeClass("hidden");
        }

        var google = google || {};

        var options = { valueNames: ["date", "owner"] };
        var imageList = new List("image-list", options);

        $("#selectOwner").on("change", function() {
            var selectedOwner = $(this).val();
            $("#map").addClass("hidden").empty();

            $(".owner").each(function(i, owner) {
                $(owner).closest("li").show();
                if (selectedOwner !== "" && $(owner).find("span").text() !== selectedOwner) {
                    $(owner).closest("li").hide();
                }
            });
        });

        function mapInit() {
            $("#map").toggleClass("hidden");

            if ($("#map").children().length)
                return;

            var mapLocations = $("img").filter(function (i, pic) {
                return pic.dataset.lat && pic.dataset.lng && $(pic).is(":visible");
            }).map(function (i, pic) {
                return {
                    lat: parseFloat(pic.dataset.lat),
                    lng: parseFloat(pic.dataset.lng),
                    alt: "<div><div class='thumbnail'><img src='" + pic.src + "' /></div>" +
                        "<p>" + pic.alt + "</p><p class='small'>Photo by: " + pic.dataset.author + "</p></div>"
                }
            });

            var bounds = new google.maps.LatLngBounds();
            var infowindow = new google.maps.InfoWindow();

            var map = new google.maps.Map(document.getElementById('map'));
            $.each(mapLocations, function(i, loc) {
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(loc.lat, loc.lng),
                    map: map
                });
                bounds.extend(marker.position);

                google.maps.event.addListener(marker,
                    "click",
                    (function(marker, i) {
                        return function() {
                            infowindow.setContent(loc.alt);
                            infowindow.open(map, marker);
                        }
                    })(marker, i));
            });

            map.fitBounds(bounds);
        }

        $(".js-view-map").on("click", mapInit);
    </script>
}