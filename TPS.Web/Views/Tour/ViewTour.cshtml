@model TPS.Web.Core.ViewModels.TourImagesViewModel

@{
    ViewBag.Title = Model.Tour.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="tour-header">
    <img src="@Model.Tour.Thumbnail.Replace("~","../..")" alt="@Model.Tour.Name" class="img-responsive"/>
    <div class="tour-text">
        <h1 class="tour-title">@ViewBag.Title</h1>
        <p class="lead tour-description">@Model.Tour.Description</p>
    </div>
</div>

<div id="image-list" >
    <div class="navbar navbar-inverse navbar-filter">
        <div class="container-fluid">
            <ul class="nav navbar-nav">
                <li class="dropdown">
                    <a href="#" class="dropdown-toggle navbar-brand" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                        Filter by uploader <span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu">
                        <li>
                            <a href="#" class="select-uploader">Show all</a>
                        </li>
                        @foreach (var uploader in Model.UploaderNames)
                        {
                            <li>
                                <a href="#" class="select-uploader">@uploader</a>
                            </li>

                        }
                    </ul>
                </li>
            </ul>
            <div class="navbar-form navbar-right">
                <div class="form-group">
                    <button type="button" class="btn btn-default js-view-map hidden">
                        <i class="glyphicon glyphicon-globe"></i>
                        <span>View map</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <div id="map" class="hidden" style="width: 100%; margin-bottom: 10px; height: 400px;"></div>

    <div class="row">
        <div class="col-sm-12">
            <ul class="list-inline list list-tour-images">
                @foreach (var imageModel in Model.TourImages)
                {
                    <li>
                        <div class="thumbnail"> <!-- TODO image should open in gallery viewer that allows further control, remove use of photoswipe plugin -->
                            <img src="@imageModel.Image.ImageUrl.Replace("~", @"..\..")?w=320&h=256&mode=crop"
                                 alt="@imageModel.Image.Caption"
                                 data-author="@imageModel.Image.Owner.FullName"
                                 data-lat="@imageModel.Image.Latitude"
                                 data-lng="@imageModel.Image.Longitude"
                                 data-width="@imageModel.Image.Width"
                                 data-height="@imageModel.Image.Height"
                                 class="image img-responsive"/>
                            <div class="img-data">
                                <div class="img-caption">@imageModel.Image.Caption</div>
                                <div class="owner">
                                    Photo by: <span>@imageModel.Image.Owner.FullName</span>
                                </div>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>Updates</h3>
    </div>
    <div class="panel-body">
        <div class="blog-article">
            <h2>A cycle challenge memoir</h2>
            <p><i class="glyphicon glyphicon-user"></i> by Jon Lombard</p>
            <small>Posted on 30 August 2017 at 10:34 AM</small>
            <hr />
            <p class="lead">Read a journal about cycling from Land's End to John o'Groats</p>
            <p>Daniel Darkens has kindly submited his memoir of the tour for general reading.</p>
            <p>Feel free to download the attachment <a href="~/Uploads/documents/lejog-memoir.pdf" target="_blank">here</a>.</p>
        </div>
    </div>
    @*<div class="panel-footer">
            <p>This is the blog post footer</p>
        </div>
        <div class="panel-body">
            <div class="blog-article">
                <h2>Blog Post Update</h2>
                <p><i class="glyphicon glyphicon-user"></i> by Jon Lombard</p>
                <small>Posted on 24 August 2017 at 21:34 PM</small>
                <hr/>
                <p class="lead">A blog post update first line goes here</p>
                <p>This is a blog post update with some text in here</p>
                <p>This is a blog post update with some text in here</p>
                <p>This is a blog post update with some text in here</p>
            </div>
        </div>
        <div class="panel-body">
            <div class="blog-article">
                <h2>Blog Post Update</h2>
                <p><i class="glyphicon glyphicon-user"></i> by Jon Lombard</p>
                <small>Posted on 24 August 2017 at 21:34 PM</small>
                <hr/>
                <p class="lead">A blog post update first line goes here</p>
                <p>This is a blog post update with some text in here</p>
                <p>This is a blog post update with some text in here</p>
                <p>This is a blog post update with some text in here</p>
            </div>
        </div>*@
</div>

<div class="comment-box" style="display: none;">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3>Comments</h3>
        </div>
        <div class="panel-body">
            <ul class="media-list">
            </ul>
            <div class="comment-entry">
                <div class="form-group">
                    <textarea class="form-control" rows="3"></textarea>
                </div>
                <button type="button" class="btn btn-default">Add comment</button>
            </div>
        </div>
    </div>
</div>

@Html.Partial("_ImageModal")

@section Scripts {
    @Scripts.Render("~/Scripts/App/app.js")
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCYa67zXJI_Zdh_NNyuIfq1k6rO2TuNp8Y&callback=enableMaps"></script>
    <script>
        var tourId = "@Model.Tour.Id";

        function addComment(comment) {
            var commenter = $("<h4 />").addClass("media-heading").text(comment.Commenter.FullName);
            var dateDiv = $("<div />").addClass("small").text("on " + moment(comment.CommentDate).format("dddd, MMMM Do YYYY, h:mm a"));
            var p = $("<p />").addClass("lead").text(comment.CommentValue);

            var mediaLeft = $("<div />").addClass("media-left").append("<a href=#><img alt='64x64' class='media-object' src='/Uploads/avatar.jpg'></a>");
            var mediaBody = $("<div />").addClass("media-body").append(commenter).append(dateDiv).append(p);
            var li = $("<li />").addClass("media").append(mediaLeft).append(mediaBody);

            $(".media-list").append(li);
        }

        $(document).ready(function() {
            console.log("doc ready");

            $.ajax({
                url: "/api/Comments/" + tourId,
                method: "GET"
            }).done(function (comments) {
                console.log("get comments result", comments);

                $.each(comments, function(i, comment) {
                    addComment(comment);
                });
            }).fail(function (error) {
                console.log("get comments error", error);
            });
        });

        $(".comment-entry").on("click", "button", function(e) {
            e.preventDefault();

            var commentTextarea = $(".comment-entry").find("textarea");

            if (commentTextarea.val() === "") {
                return;
            }

            var commentDto = {
                CommentValue: commentTextarea.val(),
                TourId: tourId
            };

            $.ajax({
                url: "/api/Comments",
                method: "POST",
                data: commentDto
            }).done(function (comment) {
                console.log("post comment result", comment);
                commentTextarea.val("");

                addComment(comment);
            }).fail(function (error) {
                console.log("post comment error", error);
            });
        });

        function enableMaps() {
            $(".js-view-map").removeClass("hidden");
        }

        var google = google || {};

        $(".select-uploader").on("click", function (e) {
            e.preventDefault();

            $(".select-uploader").each(function(i, a) {
                $(a).parent().removeClass("active");
            });

            var selectedOwner = $(this).text();
            $(this).parent().addClass("active");
            $("#map").addClass("hidden").empty();

            $(".owner").each(function(i, owner) {
                $(owner).closest("li").show();
                if (selectedOwner !== "Show all" && $(owner).find("span").text() !== selectedOwner) {
                    $(owner).closest("li").hide();
                }
            });
        });

        function mapInit(e) {
            e.preventDefault();

            $("#map").toggleClass("hidden");

            if ($("#map").children().length)
                return;

            var mapLocations = $("img").filter(function (i, pic) {
                return pic.dataset.lat && pic.dataset.lng && $(pic).is(":visible");
            }).map(function (i, pic) {
                return {
                    lat: parseFloat(pic.dataset.lat),
                    lng: parseFloat(pic.dataset.lng),
                    alt: "<div><div class='thumbnail'><img src='" + pic.src + "' /></div>" +
                    "<p>" + pic.alt + "</p><p class='small'>Photo by: " + pic.dataset.author + "</p></div>",
                    src: pic.src.split("?")[0]
                }
            });

            if (!mapLocations.length) {
                var noMapData = $("<div />").addClass("alert alert-danger").text("Unfortunately there is no location data for the selected photo's.");
                $("#map").append(noMapData);
                return;
            }

            var bounds = new google.maps.LatLngBounds();
            var infowindow = new google.maps.InfoWindow();

            var map = new google.maps.Map(document.getElementById('map'));
            $.each(mapLocations, function(i, loc) {
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(loc.lat, loc.lng),
                    map: map,
                    icon: loc.src + "?w=50&h=50&mode=crop"
                });
                bounds.extend(marker.position);

                google.maps.event.addListener(marker,
                    "click",
                    (function(marker) {
                        return function() {
                            infowindow.setContent(loc.alt);
                            infowindow.open(map, marker);
                        }
                    })(marker, i));
            });

            map.fitBounds(bounds);
        }

        $(".js-view-map").on("click", mapInit);
    </script>
}